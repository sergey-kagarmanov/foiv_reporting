package application.db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sun.org.apache.bcel.internal.generic.Type;

import application.errors.ReportError;
import application.models.Action;
import application.models.AttributeDescr;
import application.models.FileAttribute;
import application.models.FileEntity;
import application.models.FileType;
import application.models.Key;
import application.models.ProcessStep;
import application.models.Report;
import application.models.ReportFile;
import application.models.TransportFile;
import application.utils.DateUtils;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

public class Dao {

	private Connection connection;

	public Dao() {
		try {
			Class.forName("org.sqlite.JDBC");
			connection = DriverManager.getConnection("jdbc:sqlite:D:\\sdm\\fc_reports.db");
			System.out.println("Database connection");
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e1) {
			e1.printStackTrace();
		}
	}

	public int saveTransport(Report report, String file, int encrypt, LocalDateTime dateTime) {
		int id = 0;
		try {
			String sql = "INSERT INTO transport(report_id, name, encrypt, datetime) VALUES (?,?,?,?)";
			PreparedStatement ps = connection.prepareStatement(sql,
					Statement.RETURN_GENERATED_KEYS);
			ps.setInt(1, report.getId());
			ps.setString(2, file);
			ps.setInt(3, encrypt);
			ps.setString(4, DateUtils.format(dateTime));
			ps.executeUpdate();
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getInt(1);
			}
			rs.close();
			ps.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return id;
	}

	public int saveFile(Report report, String file, LocalDateTime datetime, String container) {
		int id = 0;

		try {
			String sql = "INSERT INTO files(report_id, name, datetime) VALUES (?,?,?)";
			PreparedStatement ps = connection.prepareStatement(sql,
					Statement.RETURN_GENERATED_KEYS);
			ps.setInt(1, report.getId());
			ps.setString(2, file);
			ps.setString(3, DateUtils.format(datetime));
			ps.executeUpdate();
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getInt(1);
			}
			rs.close();
			ps.close();

			int transportId = 0;
			sql = "SELECT id FROM transport WHERE name LIKE ?";
			ps.setString(1, container);
			rs = ps.executeQuery();
			if (rs.next()) {
				transportId = rs.getInt("id");
			}
			rs.close();
			ps.close();

			if (id != 0 && transportId != 0) {
				sql = "INSERT INTO transport_contain(transport_id, file_id)VALUES(?,?)";
				ps = connection.prepareStatement(sql);
				ps.setInt(1, transportId);
				ps.setInt(2, id);
				ps.executeUpdate();
				ps.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return id;
	}

	/**
	 * Returns String[] of 2 elements: first path for encrypt, second to
	 * decrypt.
	 * 
	 * @param reportName
	 * @return
	 */
	public String[] getPathForReport(Report report) {

		String[] tmp = new String[6];
		try {
			PreparedStatement ps = connection.prepareStatement(
					"SELECT cp.* FROM current_path cp LEFT JOIN reports r ON cp.report_id = r.id WHERE r.id = ?");
			ps.setInt(1, report.getId());
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {
				tmp[0] = rs.getString("path_encrypt");
				tmp[1] = rs.getString("path_decrypt");
				tmp[2] = rs.getString("path_encrypt_archive");
				tmp[3] = rs.getString("path_decrypt_archive");
				tmp[4] = rs.getString("output_encrypt_path");
				tmp[5] = rs.getString("output_decrypt_path");
			}
			rs.close();
			ps.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return tmp;
	}

	public void savePath(Report report, String path, boolean decrypt, boolean archive) {
		try {
			String sql = "UPDATE current_path SET path_";
			if (decrypt) {
				sql += "decrypt";
			} else {
				sql += "encrypt";
			}
			if (archive) {
				sql += "_archive";
			}
			sql += "=? where report_id=?";
			PreparedStatement ps = connection.prepareStatement(sql);
			ps.setString(1, path);
			ps.setInt(2, report.getId());
			ps.executeUpdate();
			ps.close();

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void saveOutputPath(Report report, String path, boolean decrypt) {
		try {
			String sql = "UPDATE current_path SET output_";
			if (decrypt) {
				sql += "decrypt";
			} else {
				sql += "encrypt";
			}
			sql += "_path =? WHERE report_id=?";
			PreparedStatement ps = connection.prepareStatement(sql);
			ps.setString(1, path);
			ps.setInt(2, report.getId());
			ps.executeUpdate();
			ps.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public ObservableList<Report> getReports() {
		List<Report> reports = new ArrayList<Report>();
		Report tmpReport = null;
		try {
			String sql = "SELECT r.id, r.name, r.output_path_in, r.output_path_out, r.path_out, r.archive_path_out, r.path_in, r.archive_path_in FROM reports r ";
			PreparedStatement ps = connection.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				tmpReport = new Report(rs.getInt("id"), rs.getString("name"), null, null, null,
						null, rs.getString("path_out"), rs.getString("path_in"),
						rs.getString("archive_path_out"), rs.getString("archive_path_in"),
						rs.getString("output_path_out"), rs.getString("output_path_in"));
				/**
				 * Get transport decrypt pattern
				 */
				tmpReport.setTransportInPattern(getFileType(tmpReport.getId(), 0, 1));
				/**
				 * Get transport encrypt pattern
				 */
				tmpReport.setTransportOutPattern(getFileType(tmpReport.getId(), 1, 1));
				/**
				 * Get report encrypt patterns
				 */
				tmpReport.setPatternOut(getFileTypeAsList(tmpReport.getId(), 1, 0));

				/**
				 * Get report decrypt patterns
				 */
				tmpReport.setPatternIn(getFileTypeAsList(tmpReport.getId(), 0, 1));

				reports.add(tmpReport);

			}
			rs.close();
			ps.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return FXCollections.observableArrayList(reports);
	}

	/**
	 * for encrypt - 1, for decrypt - 0
	 * 
	 * @param report
	 * @param encrypt
	 * @return
	 */
	public ProcessStep getActionForReport(Report report, int encrypt) {
		ProcessStep step = null;

		try {
			String sql = "SELECT k.id as kid, k.name as kname, k.data as kdata, t.id as tid, t.name as tname, a.data as adata, a.position, a.id FROM action a LEFT JOIN action_type t ON t.id = a.type LEFT JOIN key k ON a.key = k.id WHERE report_id = ? AND a.encrypt = ? ORDER BY position DESC";
			PreparedStatement ps = connection.prepareStatement(sql);
			ps.setInt(1, report.getId());
			ps.setInt(2, encrypt);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				Key k = new Key(rs.getInt("kid"), rs.getString("kname"), rs.getString("kdata"));
				Action a = new Action(rs.getInt("tid"), rs.getString("tname"),
						rs.getString("adata"));
				ProcessStep tmp = new ProcessStep(rs.getInt("id"), a, k, step, report);
				step = tmp;
			}
			rs.close();
			ps.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return step;
	}

	/**
	 * Return files without linked files and attributes, but transport files
	 * with list it contains
	 * 
	 * @param report
	 * @param encrypt
	 * @return
	 */
	public ObservableList<TransportFile> getArchiveFiles(Report report, Integer encrypt) {
		List<TransportFile> files = new ArrayList<TransportFile>();
		TransportFile tfile = null;
		Integer id = 0;
		Map<String, ReportFile> listFiles = null;
		try {
			String sql = "SELECT f.id, f.name, f.datetime, f2.id as cid, f2.name as cname, f2.datetime as cdatetime, f.direction, f.report_id FROM files f LEFT JOIN transport_files tf ON f.id = tf.parent_id LEFT JOIN files f2 ON tf.child_id = f2.id WHERE f.report_id = ? AND f.direction = ? AND tf.id IS NOT NULL ORDER BY f.id ASC , f.datetime ASC";
			PreparedStatement ps = connection.prepareStatement(sql);
			ps.setInt(1, report.getId());
			ps.setInt(2, encrypt);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				if (id != rs.getInt("id")) {
					id = rs.getInt("id");
					listFiles = new HashMap<String, ReportFile>();
					tfile = new TransportFile(id, rs.getString("name"),
							DateUtils.fromSQLite(rs.getString("datetime")), report, encrypt == 1,
							null, listFiles);
					files.add(tfile);
				}
				listFiles.put(rs.getString("cname"),
						new ReportFile(rs.getInt("cid"), rs.getString("cname"),
								DateUtils.fromSQLite(rs.getString("cdatetime")), report,
								encrypt == 1, null, null));
			}
			rs.close();
			ps.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return FXCollections.observableArrayList(files);
	}

	public Map<String, FileEntity> getArchiveFiles() {
		Map<String, FileEntity> files = new HashMap<String, FileEntity>();
		FileEntity tfile = null;
		Integer id = 0;
		Map<String, ReportFile> listFiles = null;
		try {
			String sql = "SELECT f.id, f.name, f.datetime, f.linked_id, f2.id as cid, f2.name as cname, f2.datetime as cdatetime,"
					+ " f.direction, f.report_id, f2.direction as cdir"
					+ ", r.id as rid FROM files f LEFT JOIN transport_files tf ON f.id = tf.parent_id LEFT JOIN files f2 ON tf.child_id = f2.id LEFT JOIN reports r ON f.report_id = r.id WHERE tf.id IS NOT NULL ORDER BY f.id ASC , f.datetime ASC";
			PreparedStatement ps = connection.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				if (id != rs.getInt("id")) {
					id = rs.getInt("id");
					listFiles = new HashMap<String, ReportFile>();
					tfile = new TransportFile(id, rs.getString("name"),
							DateUtils.fromSQLite(rs.getString("datetime")),
							getReportById(rs.getInt("rid")), rs.getInt("cdir") == 1,
							rs.getObject("linked_id") != null
									? getReportFileById(rs.getInt("linked_id")) : null,
							listFiles);
					files.put(tfile.getName(), tfile);
				}
				listFiles.put(rs.getString("cname"), getReportFileById(rs.getInt("cid")));
			}
			rs.close();
			ps.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return files;
	}

	public Report getReportById(Integer id) {
		Report tmpReport = null;
		try {
			String sql = "SELECT r.id, r.name, r.path_in, r.output_path_in, r.path_out, r.archive_path_in, r.output_path_out, r.archive_path_out FROM reports r WHERE r.id = ?";
			PreparedStatement ps = connection.prepareStatement(sql);
			ps.setInt(1, id);
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {
				tmpReport = new Report(rs.getInt("id"), rs.getString("name"), null, null, null,
						null, rs.getString("path_out"), rs.getString("path_in"),
						rs.getString("archive_path_out"), rs.getString("archive_path_in"),
						rs.getString("output_path_out"), rs.getString("output_path_in"));
				/**
				 * Get transport decrypt pattern
				 */
				tmpReport.setTransportInPattern(getFileType(tmpReport.getId(), 0, 1));
				/**
				 * Get transport encrypt pattern
				 */
				tmpReport.setTransportOutPattern(getFileType(tmpReport.getId(), 1, 1));
				/**
				 * Get report encrypt patterns
				 */
				tmpReport.setPatternOut(getFileTypeAsList(tmpReport.getId(), 1, 0));
				/**
				 * Get report decrypt patterns
				 */
				tmpReport.setPatternIn(getFileTypeAsList(tmpReport.getId(), 0, 0));

			}
			rs.close();
			ps.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return tmpReport;
	}

	public ReportFile getReportFileById(Integer id) {
		ReportFile rf = null;
		try {

			String sql = "SELECT f.id, f.datetime, f.direction, f.linked_id, f.name, f.report_id, a.name as aname, fa.value, fa.attribute_id FROM files f LEFT JOIN file_attributes fa  ON f.id = fa.file_id LEFT JOIN attributes a ON a.id = fa.attribute_id WHERE f.id=?";
			PreparedStatement ps = connection.prepareStatement(sql);
			ps.setInt(1, id);
			ResultSet rs = ps.executeQuery();
			boolean newFile = true;
			while (rs.next()) {
				if (newFile) {
					Report rep = getReportById(rs.getInt("report_id"));
					ReportFile rftmp = null;
					if (rs.getObject("linked_id") != null) {
						rftmp = getReportFileById(rs.getInt("linked_id"));
					}
					rf = new ReportFile(rs.getInt("id"), rs.getString("name"),
							DateUtils.fromSQLite(rs.getString("datetime")), rep,
							rs.getInt("direction") == 1, rftmp,
							new HashMap<String, FileAttribute>());

					newFile = false;
				}
				if (rs.getObject("aname") != null) {
					rf.getAttributes().put(rs.getString("aname"),
							new FileAttribute(rs.getInt("attribute_id"), rs.getString("aname"),
									rs.getString("value")));
				}

			}

			rs.close();
			ps.close();
		} catch (

		SQLException e) {
			e.printStackTrace();
		}
		return rf;
	}

	/*
	 * public ObservableList<FileEntity> getFilesByTransport(Report report,
	 * FileEntity transport) { List<FileToDo> files = new ArrayList<FileToDo>();
	 * try { String sql =
	 * "SELECT f.* FROM transport_contain tc LEFT JOIN files f ON tc.file_id = f.id WHERE f.report_id = ? AND tc.transport_id = ? ORDER BY f.datetime ASC"
	 * ; PreparedStatement ps = connection.prepareStatement(sql); ps.setInt(1,
	 * report.getId()); ps.setInt(2, transport.getId()); ResultSet rs =
	 * ps.executeQuery(); while (rs.next()) { FileToDo file = new
	 * FileToDo(rs.getInt("id"), new File(rs.getString("name")),
	 * DateUtils.fromSQLite(rs.getString("datetime"))); files.add(file); }
	 * rs.close(); ps.close(); } catch (SQLException e) { e.printStackTrace(); }
	 * 
	 * return FXCollections.observableArrayList(files); }
	 */

	public void saveTransportFile(Report report, String name, LocalDateTime dateTime,
			Boolean encrypt) {
		try {
			String sql = "INSERT INTO transport(report_id, name, datetime, encrypt) VALUES ( ?, ?, ?, ?)";
			PreparedStatement ps = connection.prepareStatement(sql);
			ps.setInt(1, report.getId());
			ps.setString(2, name);
			ps.setString(3, DateUtils.format(dateTime));
			ps.setInt(4, encrypt ? 1 : 0);
			ps.executeUpdate();
			ps.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/*
	 * public List<FileType> getFileTypes(Report report, boolean encrypt) {
	 * List<FileType> types = new ArrayList<FileType>(); FileType fType = null;
	 * PreparedStatement ps = null; ResultSet rs = null; try { String sql =
	 * "SELECT * FROM file_types WHERE report_id = ? AND encrypt = ?"; ps =
	 * connection.prepareStatement(sql); ps.setInt(1, report.getId());
	 * ps.setInt(2, encrypt ? 1 : 0); rs = ps.executeQuery(); while (rs.next())
	 * { fType = new FileType(rs.getInt("id"), rs.getString("name"),
	 * rs.getString("mask"), report, encrypt, rs.getInt("transport") == 1);
	 * types.add(fType); } } catch (SQLException e) { e.printStackTrace(); }
	 * finally { try { rs.close(); ps.close(); } catch (SQLException e) { //
	 * TODO Auto-generated catch block e.printStackTrace(); }
	 * 
	 * } return types; }
	 */

	public Map<String, AttributeDescr> getAttributes(FileType type) {
		Map<String, AttributeDescr> map = new HashMap<>();
		String sql = "SELECT as1.*, a.name, a.id as aid FROM attribute_settings as1 LEFT JOIN attributes a ON as1.attribute_id = a.id WHERE as1.type_id=?";
		PreparedStatement ps = null;
		try {
			ps = connection.prepareStatement(sql);
			ps.setInt(1, type.getId());
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				map.put(rs.getString("name"),
						new AttributeDescr(rs.getInt("aid"), rs.getString("name"),
								rs.getString("place"), rs.getInt("in_name") == 1,
								rs.getString("etc"), rs.getString("attribute")));
			}

			rs.close();
			ps.close();
		} catch (SQLException e) {
			e.printStackTrace();
			try {
				ps.close();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}

		return map;
	}

	public void saveReportFile(ReportFile file) {
		try {
			String sql = "INSERT INTO files(report_id, name, datetime, direction, linked_in) VALUES (?,?,?,?,?)";
			PreparedStatement ps = connection.prepareStatement(sql,
					Statement.RETURN_GENERATED_KEYS);
			ps.setInt(1, file.getReport().getId());
			ps.setString(2, file.getName());
			ps.setString(3, DateUtils.toSQLite(file.getDatetime()));
			ps.setInt(4, file.getDirection() ? 1 : 0);
			if (file.getLinkedFile() != null) {
				ps.setInt(5, file.getLinkedFile().getId());
			} else {
				ps.setNull(6, Types.INTEGER);
			}
			ps.executeUpdate();
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				file.setId(rs.getInt(1));
			}
			rs.close();
			ps.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	public void saveTransportFile(TransportFile tfile) {
		String sql = "";
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			sql = "INSERT INTO files(report_id, name, datetime, direction, linked_id) VALUES (?,?,?,?,?)";
			ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			ps.setInt(1, tfile.getReport().getId());
			ps.setString(2, tfile.getName());
			ps.setString(3, DateUtils.toSQLite(tfile.getDatetime()));
			ps.setInt(4, tfile.getDirection() ? 1 : 0);
			if (tfile.getLinkedFile() != null && tfile.getLinkedFile().getId() != 0) {
				ps.setInt(5, tfile.getLinkedFile().getId());
			} else {
				ps.setNull(5, Types.INTEGER);
			}
			ps.executeUpdate();
			rs = ps.getGeneratedKeys();
			if (rs.next()) {
				tfile.setId(rs.getInt(1));
			}
			rs.close();
			ps.close();

			Integer linkedFileId = null;
			for (ReportFile rf : tfile.getListFiles().values()) {
				linkedFileId = null;
				sql = "SELECT * FROM files WHERE name = ?";
				ps = connection.prepareStatement(sql);
				ps.setString(1, rf.getAttributes().get(AttributeDescr.PARENT).getValue());
				rs = ps.executeQuery();
				if (rs.next()) {
					linkedFileId = rs.getInt("id");
				}
				rs.close();
				ps.close();

				sql = "INSERT INTO files(report_id, name, datetime, direction, linked_id) VALUES (?,?,?,?,?)";
				ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
				ps.setInt(1, rf.getReport().getId());
				ps.setString(2, rf.getName());
				ps.setString(3, DateUtils.toSQLite(rf.getDatetime()));
				ps.setInt(4, rf.getDirection() ? 1 : 0);
				if (rf.getLinkedFile() != null) {
					ps.setInt(5, rf.getLinkedFile().getId());
				} else if (linkedFileId != null) {
					ps.setInt(5, linkedFileId);
				} else {
					ps.setNull(5, Types.INTEGER);
				}
				ps.executeUpdate();
				rs = ps.getGeneratedKeys();
				if (rs.next()) {
					rf.setId(rs.getInt(1));
				}
				rs.close();
				ps.close();

				sql = "INSERT INTO transport_files(parent_id, child_id)VALUES(?,?)";
				ps = connection.prepareStatement(sql);
				ps.setInt(1, tfile.getId());
				ps.setInt(2, rf.getId());
				ps.executeUpdate();
				ps.close();

				for (FileAttribute fattr : rf.getAttributes().values()) {
					sql = "INSERT INTO file_attributes(file_id, attribute_id, value)VALUES(?,?,?)";
					ps = connection.prepareStatement(sql);
					ps.setInt(1, rf.getId());
					ps.setInt(2, fattr.getId());
					ps.setString(3, fattr.getValue());
					ps.executeUpdate();
					ps.close();
				}
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Report saveReport(Report report) throws ReportError {
		Report tmpReport = null;
		if (report.getId() != null && report.getId() != 0) {
			tmpReport = getReportById(report.getId());
		}
		String sql = "";
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			if (tmpReport != null) {

				sql = "UPDATE reports SET name = ? WHERE id = ?";
				ps = connection.prepareStatement(sql);
				ps.setString(1, report.getName());
				ps.setInt(2, report.getId());
				ps.executeUpdate();
				ps.close();
			} else {
				sql = "INSERT INTO reports(name) VALUES (?)";
				ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
				ps.setString(1, report.getName());
				ps.executeUpdate();
				rs = ps.getGeneratedKeys();
				if (rs.next()) {
					report.setId(rs.getInt(1));
				}
				tmpReport = report;
			}
			tmpReport.setTransportInPattern(addFileType(report.getTransportInPattern(), tmpReport));
			tmpReport.setTransportOutPattern(
					addFileType(report.getTransportOutPattern(), tmpReport));
			ObservableList<FileType> list = FXCollections.observableArrayList();
			for (FileType ft : report.getPatternIn()) {
				list.add(addFileType(ft, tmpReport));
			}
			for (FileType ft : tmpReport.getPatternIn()) {
				if (!report.getPatternIn().contains(ft))
					delete(ft);
			}
			tmpReport.setPatternIn(list);

			list = FXCollections.observableArrayList();
			for (FileType ft : report.getPatternOut()) {
				list.add(addFileType(ft, tmpReport));
			}
			for (FileType ft : tmpReport.getPatternOut()) {
				if (!report.getPatternOut().contains(ft))
					delete(ft);
			}

			tmpReport.setPatternOut(list);

		} catch (SQLException e) {
			e.printStackTrace();
			throw new ReportError(
					"Не получилось сохранить " + report.getName() + " с id " + report.getId());
		}

		return tmpReport;
	}

	public void delete(FileType type) {
		String sql = "";
		PreparedStatement ps = null;
		try {
			sql = "DELETE FROM file_types WHERE id = ?";
			ps = connection.prepareStatement(sql);
			ps.setInt(1, type.getId());
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				ps.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	public void delete(Key key) {
		String sql = "DELETE FROM key WHERE id = ?";
		PreparedStatement ps = null;
		try {
			ps = connection.prepareStatement(sql);
			ps.setInt(1, key.getId());
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				ps.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	public void delete(FileAttribute fa) {
		String sql = "";
		PreparedStatement ps = null;
		try {
			sql = "DELETE FROM attributes WHERE id = ? ";
			ps = connection.prepareStatement(sql);
			ps.setInt(1, fa.getId());
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				ps.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	public ObservableList<String> getAttributesForChooser() {
		String sql = "SELECT * FROM attributes";
		PreparedStatement ps = null;
		ResultSet rs = null;
		ObservableList<String> list = FXCollections.observableArrayList();
		try {
			ps = connection.prepareStatement(sql);
			rs = ps.executeQuery();
			while (rs.next()) {
				list.add(rs.getString("name"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				rs.close();
				ps.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}

		}
		return list;
	}

	public ObservableList<FileAttribute> getAttributes() {
		String sql = "SELECT * FROM attributes";
		PreparedStatement ps = null;
		ResultSet rs = null;
		ObservableList<FileAttribute> list = FXCollections.observableArrayList();
		try {
			ps = connection.prepareStatement(sql);
			rs = ps.executeQuery();
			while (rs.next()) {
				list.add(new FileAttribute(rs.getInt("id"), rs.getString("name"), null));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				rs.close();
				ps.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}

		}
		return list;
	}

	public void remove(FileType fileType) {
		String sql = "DELETE FROM file_types WHERE id = ? ";
		PreparedStatement ps = null;
		try {
			ps = connection.prepareStatement(sql);
			ps.setInt(1, fileType.getId());
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				ps.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	public FileType addFileType(FileType fileType, Report report) throws ReportError {
		if (fileType != null) {
			String sql = "";
			if (fileType.getId() != 0) {
				sql = "UPDATE file_types SET mask = ?, name = ?, validationSchema = ? WHERE id= ?";
			} else {
				sql = "INSERT INTO file_types(mask, name, validationSchema, report_id, encrypt, transport)VALUES(?,?,?,?,?,?)";
			}
			PreparedStatement ps = null;
			ResultSet rs = null;

			try {
				ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
				ps.setString(1, fileType.getMask());
				ps.setString(2, fileType.getName());
				if (fileType.getValidationSchema() == null
						|| "".equals(fileType.getValidationSchema())) {
					ps.setNull(3, Types.VARCHAR);
				} else {
					ps.setString(3, fileType.getValidationSchema());
				}
				if (fileType.getId() != 0) {
					ps.setInt(4, fileType.getId());
				} else {
					ps.setInt(4, report.getId());
					ps.setInt(5, fileType.getEncrypt() ? 1 : 0);
					ps.setInt(6, fileType.getTransport() ? 1 : 0);
				}
				ps.executeUpdate();
				rs = ps.getGeneratedKeys();
				if (rs.next()) {
					fileType.setId(rs.getInt(1));
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new ReportError("Не удалось сохранить маску для файла");
			} finally {
				try {
					rs.close();
					ps.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return fileType;
	}

	public FileType getFileType(Integer reportId, Integer destination, Integer transport) {
		String sql = "";
		PreparedStatement ps = null;
		ResultSet rs = null;
		FileType ft = null;
		try {
			sql = "SELECT * from file_types WHERE report_id = ? AND encrypt = ? AND transport = ? ORDER BY encrypt";
			ps = connection.prepareStatement(sql);
			ps.setInt(1, reportId);
			ps.setInt(2, destination);
			ps.setInt(3, transport);
			rs = ps.executeQuery();
			if (rs.next()) {
				ft = new FileType(rs.getInt("id"), rs.getString("name"), rs.getString("mask"),
						rs.getString("validation_schema"), rs.getInt("encrypt") == 1,
						rs.getInt("transport") == 1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				rs.close();
				ps.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return ft;
	}

	public ObservableList<FileType> getFileTypeAsList(Integer reportId, Integer destination,
			Integer transport) {
		String sql = "";
		PreparedStatement ps = null;
		ResultSet rs = null;
		ObservableList<FileType> ft = FXCollections.observableArrayList();
		try {
			sql = "SELECT * from file_types WHERE report_id = ? AND encrypt = ? AND transport = ? ORDER BY encrypt";
			ps = connection.prepareStatement(sql);
			ps.setInt(1, reportId);
			ps.setInt(2, destination);
			ps.setInt(3, transport);
			rs = ps.executeQuery();
			while (rs.next()) {
				ft.add(new FileType(rs.getInt("id"), rs.getString("name"), rs.getString("mask"),
						rs.getString("validation_schema"), rs.getInt("encrypt") == 1,
						rs.getInt("transport") == 1));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				rs.close();
				ps.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return ft;
	}

	public void saveAttribute(FileAttribute attr) {
		String sql = "";
		PreparedStatement ps = null;
		ResultSet rs = null;
		FileAttribute tmp = null;
		try {
			sql = "SELECT * FROM attributes WHERE id = ?";
			ps = connection.prepareStatement(sql);
			ps.setInt(1, attr.getId());
			rs = ps.executeQuery();
			if (rs.next()) {
				tmp = new FileAttribute(rs.getInt("id"), rs.getString("name"), null);
			}
			rs.close();
			ps.close();

			if (tmp != null) {
				sql = "UPDATE attributes SET name=? WHERE id=?";
			} else {
				sql = "INSERT INTO attributes(name) VALUES(?)";
			}
			ps = connection.prepareStatement(sql);
			ps.setString(1, attr.getName());
			if (tmp != null) {
				ps.setInt(2, tmp.getId());
			}
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				rs.close();
				ps.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	public ObservableList<Key> getKeys() {
		String sql = "SELECT * FROM key";
		PreparedStatement ps = null;
		ResultSet rs = null;
		ObservableList<Key> list = FXCollections.observableArrayList();
		try {
			ps = connection.prepareStatement(sql);
			rs = ps.executeQuery();
			while (rs.next()) {
				list.add(new Key(rs.getInt("id"), rs.getString("name"), rs.getString("data")));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				rs.close();
				ps.close();
			} catch (SQLException e2) {
				e2.printStackTrace();
			}
		}
		return list;
	}

	public Key addKey(String name, String path) {
		String sql = "INSERT INTO key(name, data)VALUES(?,?)";
		PreparedStatement ps = null;
		ResultSet rs = null;
		Key key = null;
		try {
			ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			ps.setString(1, name);
			ps.setString(2, path);
			ps.executeUpdate();
			rs = ps.getGeneratedKeys();
			if (rs.next()) {
				key = new Key(rs.getInt(1), name, path);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				rs.close();
				ps.close();
			} catch (SQLException e2) {
				e2.printStackTrace();
			}
		}
		return key;
	}
	
	public Key editKey(Key key) {
		String sql = "UPDATE key SET name = ?, data = ? WHERE id = ?";
		PreparedStatement ps = null;
		try {
			ps = connection.prepareStatement(sql);
			ps.setString(1, key.getName());
			ps.setString(2, key.getData());
			ps.setInt(3, key.getId());
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				ps.close();
			} catch (SQLException e2) {
				e2.printStackTrace();
			}
		}
		return key;
	}

}
