package application.utils;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import application.db.Dao;
import application.errors.ReportError;
import application.models.Key;
import application.models.ProcessStep;
import application.models.Report;
import application.models.ReportFile;
import application.models.TransportFile;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

public class ProcessExecutor {

	private Report report;
	private List<File> files;
	private List<String> filenames;

	private ProcessStep currentStep;

	private Dao dao;

	private boolean useScript = false;
	private String script = "";
	private String path = "";
	private String outputPath = "";
	private String archivePath = "";
	private Map<String, TransportFile> transportFiles;
	private Map<String, ReportFile> mapFiles;
	private Logger logger;
	private Integer encrypt;
	//private Boolean parse = true;
	private FileParser parser;
	private String[] renameFiles = null;

	public ProcessExecutor(List<String> filenames, Report report, Dao dao, String path,
			String outputPath, String archivePath, Integer encrypt) {
		this.report = report;
		files = new ArrayList<>();
		this.filenames = filenames;
		this.path = path;
		this.outputPath = outputPath;
		this.dao = dao;
		transportFiles = new HashMap<String, TransportFile>();
		this.archivePath = archivePath;
		logger = new Logger(dao, report, encrypt == 1);
		mapFiles = new HashMap<String, ReportFile>();
		parser = new FileParser(dao, report, encrypt == 1);
		this.encrypt = encrypt;
	}

	public void start() throws ReportError {
		FileUtils.clearTmp(null);

		try {
			for (String filename : filenames) {
				File file = new File(path + "\\" + filename);
				if (file.exists()) {

					// Copy files to tmp directory for work
					File tmpFile = new File(FileUtils.tmpDir + file.getName());
					tmpFile.mkdirs();
					if (tmpFile.exists()) {
						tmpFile.delete();
					}
					tmpFile.createNewFile();
					Files.copy(file.toPath(), tmpFile.toPath(),
							StandardCopyOption.REPLACE_EXISTING);
					files.add(tmpFile);
					/**
					 * Parse files if them would be encrypted or modified and
					 * collect into map key - name, otherwise collect transport
					 * files into map, key - name
					 */
					if (encrypt == 1) {
						ReportFile fileEntity = new ReportFile(0, filename, LocalDateTime.now(),
								report, true, null, parser.parse(tmpFile));
						mapFiles.put(filename, fileEntity);
					} else {
						transportFiles.put(filename, new TransportFile(0, filename,
								LocalDateTime.now(), report, false, null, null));

					}
				} else {
					// TODO: Error, warning etc.
				}
			}

		} catch (IOException e) {
			e.printStackTrace();
			throw new ReportError() {
				{
					setMessage("Ошибка при копировании исходных файлов на обработку");
				}
			};
		}

		currentStep = dao.getActionForReport(report, encrypt);

		while (currentStep != null) {
			try {
				executeStep(currentStep);
				// Only fo instruction TO we need to proceed next element
				if (Constants.ACTIONS[0].equals(currentStep.getAction().getName())) {
					currentStep = currentStep.getNext();
					executeStep(currentStep);
				}
				if (useScript) {
					loadKey(currentStep.getKey());
					File batFile = new File(FileUtils.tmpDir + "batfile");
					if (batFile.exists()) {
						batFile.delete();
					}
					batFile.createNewFile();
					FileWriter fw = new FileWriter(batFile);

					fw.write(script);
					fw.flush();
					fw.close();
					Runtime r = Runtime.getRuntime();
					Process p = null;
					try {
						String q = Constants.VERBA_EXE + " /@\"" + batFile.getAbsolutePath() + "\"";
						p = r.exec(q);
						System.out.println(p.waitFor());

					} catch (InterruptedException | IOException ie) {
						ie.printStackTrace();
					}
					unloadKey();
					batFile.delete();
					script = "";
					useScript = false;
				}
				currentStep = currentStep.getNext();
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		// Copy files from tmp dir to output dir
		try {
			if (encrypt==1){
				for(TransportFile tf : transportFiles.values()){
					File tfile = new File(FileUtils.tmpDir + tf.getName());
					if (tfile.exists()){
						File outTFile = new File(outputPath + "\\"+ tfile.getName());
						outTFile.mkdirs();
						if (outTFile.exists())
							outTFile.delete();
						outTFile.createNewFile();
						Files.copy(tfile.toPath(), outTFile.toPath(),
								StandardCopyOption.REPLACE_EXISTING);
					}
				}
			}else{
				for(ReportFile rf : mapFiles.values()){
					File rfile = new File(FileUtils.tmpDir + rf.getName());
					if (rfile.exists()){
						File outrFile = new File(outputPath + "\\"+ rfile.getName());
						outrFile.mkdirs();
						if (outrFile.exists())
							outrFile.delete();
						outrFile.createNewFile();
						Files.copy(rfile.toPath(), outrFile.toPath(),
								StandardCopyOption.REPLACE_EXISTING);
					}
					
				}
				
				for (TransportFile tf : transportFiles.values()) {
					for (String rfName : tf.getListFiles().keySet()) {
						/*FileAttributes attr = parser.parse(new File(FileUtils.tmpDir)
								.listFiles((dir, name) -> name.contains(rfName))[0]);*/
						((ReportFile) tf.getListFiles().get(rfName)).setAttributes(parser.parse(new File(FileUtils.tmpDir)
								.listFiles((dir, name) -> name.contains(rfName))[0]));
					}
				}
			}
			putFilesIntoArch();

			for (TransportFile tf : transportFiles.values()) {
				logger.log(tf);
			}

		} catch (IOException e) {
			e.printStackTrace();
			throw new ReportError("Ошибка при копировании подготовленных файлов");
		}
	}

	public void putFilesIntoArch() throws ReportError {
		try {
			File f = null;
			for (TransportFile tf : transportFiles.values()) {
				if ((f = new File(FileUtils.tmpDir+tf.getName())).exists()) {

					// Copy files to tmp directory for work
					File tmpFile = new File(archivePath + "\\" + tf.getName());
					tmpFile.mkdirs();
					if (tmpFile.exists()) {
						tmpFile.delete();
					}
					tmpFile.createNewFile();
					Files.copy(f.toPath(), tmpFile.toPath(),
							StandardCopyOption.REPLACE_EXISTING);
					f.delete();
					for(ReportFile rf : tf.getListFiles().values()){
						File rfFile = new File(FileUtils.tmpDir + rf.getName());
						tmpFile = new File(archivePath+"\\"+rf.getName());
						tmpFile.mkdirs();
						if(tmpFile.exists()){
							tmpFile.delete();
						}
						tmpFile.createNewFile();
						Files.copy(rfFile.toPath(), tmpFile.toPath(),
							StandardCopyOption.REPLACE_EXISTING);
						rfFile.delete();
					}
				} else {
					// TODO: Error, warning etc.
				}
			}

		} catch (IOException e) {
			e.printStackTrace();
			throw new ReportError("Ошибка при копировании исходных файлов в архив");
		}

	}

	private void loadKey(Key key) throws ReportError {
		Runtime r = Runtime.getRuntime();
		Process p = null;
		try {
			String q = "imdisk -a -m A: -f " + key.getData();
			p = r.exec(q);
			int i = p.waitFor();
			if (i != 0)
				throw new ReportError("Ключ " + key.getName() + " не был загружен");
		} catch (InterruptedException | IOException ie) {
			ie.printStackTrace();
		}

	}

	public void unloadKey() throws ReportError {
		Runtime r = Runtime.getRuntime();
		Process p = null;
		try {
			String q = "imdisk -D -m A:";
			p = r.exec(q);
			int i = p.waitFor();
			if (i != 0)
				throw new ReportError("Ключи не были выгружены");

		} catch (InterruptedException | IOException ie) {
			ie.printStackTrace();
		}

	}

	public void executeStep(ProcessStep step) throws FileNotFoundException, IOException {
		if (Constants.ACTIONS[0].equals(step.getAction().getName())) {
			script += "TO ";
			script += step.getAction().getData();
			script += "\r\n";
			useScript = true;
		} else if (Constants.ACTIONS[1].equals(step.getAction().getName())) {
			script += "CRYPT ";
			script += FileUtils.tmpDir + step.getAction().getData();
			script += "\r\n";
			script += "START\r\n";
			useScript = true;
		} else if (Constants.ACTIONS[2].equals(step.getAction().getName())) {
			script += "SIGN ";
			script += FileUtils.tmpDir + step.getAction().getData();
			script += "\r\n";
			useScript = true;
			script += "START\r\nEXIT\r\n";
		} else if (Constants.ACTIONS[3].equals(step.getAction().getName())) {
			script += "DECRYPT ";
			script += FileUtils.tmpDir + step.getAction().getData();
			script += "\r\n";
			useScript = true;
			script += "START\r\nEXIT\r\n";
		} else if (Constants.ACTIONS[4].equals(step.getAction().getName())) {
			script += "UNSIGN ";
			script += FileUtils.tmpDir + step.getAction().getData();
			script += "\r\n";
			useScript = true;
			script += "START\r\nEXIT\r\n";
		} else if (Constants.ACTIONS[5].equals(step.getAction().getName())) {

		} else if (Constants.ACTIONS[6].equals(step.getAction().getName())) {
			Runtime r = Runtime.getRuntime();
			Process p = null;
			boolean loop = true;
			int i = 0;
			ObservableList<TransportFile> otf = dao.getArchiveFiles(report, encrypt);
			if (otf != null)
				for (TransportFile f : otf) {
					if (f.getDatetime().toLocalDate().isEqual(LocalDate.now())) {
						i++;
					}
				}
			ObservableList<String> fileList = FileUtils.getDirContentByMask(FileUtils.tmpDir,
					step.getAction().getData());
			ObservableList<String> doneList = FXCollections.observableArrayList();
			try {
				while (loop) {
					i++;
					ObservableList<String> fileListTmp = FXCollections.observableArrayList();
					for (String f : fileList) {
						if (!doneList.contains(f))
							fileListTmp.add(f);
					}
					long fileSize = 0;
					String command = FileUtils.exeDir + "arj.exe a -e ";// +
																		// FileUtils.tmpDir+step.getAction().getData();

					String pattern = encrypt==1 ? step.getReport().getTransportOutPattern().getMask().replaceAll("%date",
							DateUtils.formatReport(LocalDate.now())) : step.getReport().getTransportInPattern().getMask().replaceAll("%date",
									DateUtils.formatReport(LocalDate.now()));
					if (i < 10) {
						pattern = pattern.replaceAll("%n", i + "").replaceAll("%", "0");
					} else if (i < 100) {
						pattern = pattern.replaceAll("%%n", i + "").replaceAll("%", "0");
					} else {
						pattern = pattern.replaceAll("%%%n", i + "").replaceAll("%", "0");
					}
					command += FileUtils.tmpDir + pattern + " " + FileUtils.tmpDir;

					// Add files to transport arch, if summary filesize doesn't
					// greater than constant
					int col = 0;
					HashMap<String, ReportFile> toLog = new HashMap<String, ReportFile>();
					for (String filename : fileListTmp) {
						File tmpFile = new File(FileUtils.tmpDir + filename);
						fileSize += tmpFile.length();
						if (fileSize < Constants.FILE_SIZE && col < 50) {
							command += " " + filename;
							doneList.add(filename);
							if (renameFiles == null)
								toLog.put(filename, mapFiles.get(filename));
							else
								toLog.put(filename.replaceAll(renameFiles[1], renameFiles[0]),
										mapFiles.get(filename));
							loop = false;
							col++;
						} else {
							loop = true;
						}
					}
					transportFiles.put(pattern, new TransportFile(0, pattern, LocalDateTime.now(),
							report, encrypt == 1, null, toLog));

					try {
						p = r.exec(command);

						InputStream is = p.getInputStream();
						int w = 0;
						while ((w = is.read()) != -1) {
							System.out.print((char) w);
						}
						System.out.println(p.waitFor());
					} catch (InterruptedException | IOException ie) {
						ie.printStackTrace();
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
				System.out.println("Error!!!");
			}
			System.out.println("ARJ returned " + p.exitValue());

		} else if (Constants.ACTIONS[7].equals(step.getAction().getName())) {
			renameFiles = step.getAction().getData().split("|");
			for (File file : files) {
				file.renameTo(new File(file.getName().replaceAll(renameFiles[0], renameFiles[1])));
			}

		} else if (Constants.ACTIONS[8].equals(step.getAction().getName())) {
			Runtime r = Runtime.getRuntime();
			Process p = null;
			try {
				for (String filename : FileUtils.getDirContentByMask(FileUtils.tmpDir,
						step.getAction().getData())) {

					String q = FileUtils.rarFullPath + " e " + FileUtils.tmpDir + filename + " "
							+ FileUtils.tmpDir;
					p = r.exec(q);
					System.out.println(p.waitFor());
					File file = new File(FileUtils.tmpDir + filename);
					if (file.exists()) {
						file.delete();
					}
					File par = new File(FileUtils.tmpDir);
					for (String fname : par.list(
							(dir, name) -> !(name.contains(".arj") || name.contains(".ARJ")))) {
						transportFiles.get(filename).getListFiles().put(fname, new ReportFile(0,
								fname, LocalDateTime.now(), report, encrypt == 1, null, null));
					}
				}
			} catch (InterruptedException | IOException ie) {
				ie.printStackTrace();
			}

		}
	}
}
